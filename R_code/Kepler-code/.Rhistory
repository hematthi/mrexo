lnM.max = lM.obs+lM.sd.obs,
lnM.min = lM.obs-lM.sd.obs,
lnR.max = lR.obs+lR.sd.obs,
lnR.min = lR.obs-lR.sd.obs)
darkblue <- rgb(0,49,87,maxColorValue = 256)
lightblue <- rgb(5,122,255,maxColorValue = 256)
yellow <- rgb(242,208,58,maxColorValue = 256)
library(ggplot2)
library(extrafont)
figureData <-  ggplot() +
geom_point(data = data.points, aes(x = lnR.obs, y = lnM.obs),
col = "black", alpha = 1, size = 1) +
geom_errorbar(data = data.points,
aes(x = lnR.obs, ymin = lnM.min, ymax = lnM.max),
col = "grey20", alpha = 1, size = 0.4) +
geom_errorbarh(data = data.points,
aes(x = lnR.obs, y = lnM.obs, xmin = lnR.min, xmax = lnR.max),
col = "grey20", alpha = 1, size = 0.4) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
coord_cartesian(ylim = c(-1.5,4), xlim = c(-0.3, 1.5)) +
scale_y_continuous(breaks=c(-1, 0, 1, 2, 3, 4),
labels=c(expression(bold("0.1")),
expression(bold("1")),
expression(bold("10")),
expression(bold(paste("10"^"2"))),
expression(bold(paste("10"^"3"))),
expression(bold(paste("10"^"4"))))) +
scale_x_continuous(breaks=c(-0.2, log10(1),log10(2),log10(3), log10(4),
log10(5),log10(7),log10(10),log10(15),
log10(20),log10(30)),
labels=c(0.6, 1,2,3,4,5,7,10,15,20,30)) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
ggtitle("Kepler data")
pdf.name <- "figureData.pdf"
savepdf <- function(pdf.name, Myplot) {
pdf(file = pdf.name, width = 6, height = 4)
print(Myplot)
dev.off()
}
savepdf(pdf.name, figureData)
figure4 <-  ggplot() +
geom_point(data = data.points, aes(x = lnR.obs, y = lnM.obs),
col = "grey10", alpha = 0.6, size = 0.5) +
geom_errorbar(data = data.points,
aes(x = lnR.obs, ymin = lnM.min, ymax = lnM.max),
col = "grey20", alpha = 0.6, size = 0.15) +
geom_errorbarh(data = data.points,
aes(x = lnR.obs, y = lnM.obs, xmin = lnR.min, xmax = lnR.max),
col = "grey20", alpha = 0.6, size = 0.15) +
geom_path(data = nonparam.pred.df, aes(radius, mean),
color = darkblue, size = 1) +
geom_ribbon(data = nonparam.pred.df,
aes(x = radius, ymin = lower, ymax = upper),
fill = darkblue, alpha = 0.3) +
geom_ribbon(data = nonparam.boot.df,
aes(x = radius, ymin = lower.boot, ymax = upper.boot),
fill = lightblue, alpha = 0.3) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
coord_cartesian(ylim = c(-1.5,4), xlim = c(-0.3, 1.5)) +
scale_y_continuous(breaks=c(-1, 0, 1, 2, 3, 4),
labels=c(expression(bold("0.1")),
expression(bold("1")),
expression(bold("10")),
expression(bold(paste("10"^"2"))),
expression(bold(paste("10"^"3"))),
expression(bold(paste("10"^"4"))))) +
scale_x_continuous(breaks=c(-0.2, log10(1),log10(2),log10(3), log10(4),
log10(5),log10(7),log10(10),log10(15),
log10(20),log10(30)),
labels=c(0.6, 1,2,3,4,5,7,10,15,20,30)) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
ggtitle("Kepler data: Mass-Radius Relations")
pdf.name <- "figure4-KeplerMRrelationWithBootstrap.pdf"
savepdf <- function(pdf.name, Myplot) {
pdf(file = pdf.name, width = 6, height = 4.5)
print(Myplot)
dev.off()
}
savepdf(pdf.name, figure4)
##################### Figure 5 #######################
library(matrixStats)
num.boot <- 100
boot.sd.quantile <- sqrt(rowQuantiles(M.cond.R.var.boot[,1:num.boot],
probs = c(0.16, 0.5, 0.84)))
sd.df <- data.frame(
radius = R.points,
boot.sd.quantile = boot.sd.quantile
)
figure5 <- ggplot()  +
geom_path(data = sd.df, aes(radius, boot.sd.quantile[,2]),
color = darkblue, size = 1) +
geom_ribbon(data = sd.df,
aes(x = radius, ymin = boot.sd.quantile[,1], ymax = boot.sd.quantile[,3]),
fill = darkblue, alpha = 0.3) +
ylab(expression(atop("Instrinic scatter of M-R relation",
paste("log(Mass (M"["Earth"],"))")))) +
# ylab(label = "Intrinsic scatter of M-R relation") +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
coord_cartesian(ylim = c(0.05, 0.35), xlim = c(-0.3, 1.5)) +
scale_x_continuous(breaks=c(-0.2, log10(1),log10(2),log10(3), log10(4),
log10(5),log10(7),log10(10),log10(15),
log10(20),log10(30)),
labels=c(0.6,1,2,3,4,5,7,10,15,20,30)) +
# geom_rect(aes(xmin=-0.07572071, xmax=0.9, ymin=0, ymax=0.6),
#           colour = "grey10", alpha =  0.1, linetype = 2) +
geom_vline(xintercept = c(log10(0.86)), linetype = 1, color = "grey50") +
geom_vline(xintercept = c(log10(5),  log10(11)), linetype = 2, color = "grey50") +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
pdf.name <- "figure5-Keplersd.pdf"
savepdf(pdf.name, figure5)
##################### Figure 5-a #######################
library(matrixStats)
num.boot <- 100
boot.sd.quantile <- sqrt(rowQuantiles(M.cond.R.var.boot[,1:num.boot],
probs = c(0.16, 0.5, 0.84)))
sd.trans.df <- data.frame(
radius = R.points,
boot.sd.trans.quantile = 10^(boot.sd.quantile)
)
figure5a <-
ggplot()  +
geom_path(data = sd.trans.df, aes(radius, boot.sd.trans.quantile.50.),
color = darkblue, size = 1) +
geom_ribbon(data = sd.trans.df,
aes(x = radius,
ymin = boot.sd.trans.quantile.16., ymax = boot.sd.trans.quantile.84.),
fill = darkblue, alpha = 0.3) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
coord_cartesian( xlim = c(-0.3, 1.5)) +
scale_x_continuous(breaks=c(-0.2, log10(1),log10(2),log10(3), log10(4),
log10(5),log10(7),log10(10),log10(15),
log10(20),log10(30)),
labels=c(0.6,1,2,3,4,5,7,10,15,20,30)) +
# geom_rect(aes(xmin=-0.07572071, xmax=0.9, ymin=0, ymax=0.6),
#           colour = "grey10", alpha =  0.1, linetype = 2) +
geom_vline(xintercept = c(log10(0.86)), linetype = 1, color = "grey50") +
geom_vline(xintercept = c(log10(5),  log10(11)), linetype = 2, color = "grey50") +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
pdf.name <- "figure5a-Keplersd-transformed.pdf"
savepdf(pdf.name, figure5a)
##################### Figure 6 #######################
# plot densities
weights <- weights.boot
deg.choose <- 55
cond.density <- function(y, y.max, y.min, x, x.max, x.min, deg, w.hat) {
# evaluate beta density for y
deg.vec <- 1:deg
# return conditional mean, variance, quantile, distribution
y.std <- (y-y.min)/(y.max-y.min)
y.beta.indv <- sapply(deg.vec,
function(data, degree) {dbeta(data, degree, deg-degree+1)},
data = y.std) / (y.max-y.min)
y.beta.pdf <- kronecker(rep(1, deg), y.beta.indv)
denominator <- sum(w.hat * y.beta.pdf)
########### Density ##########
density.indv.pdf <- sapply(deg.vec, function(x, degree) {
dbeta(x, degree, deg-degree+1)}, x = (x-x.min)/(x.max-x.min)) / (x.max-x.min)
density.pdf <- sum(w.hat * kronecker(density.indv.pdf, y.beta.indv))
density <- density.pdf/denominator
return(density)
}
# using the weights to calculate density function at R = log10(1.5)
R_1 <- log10(1)
R_3 <- log10(3)
R_5 <- log10(5)
R_10 <- log10(10)
R_15 <- log10(15)
M.seq <- seq(Mass.min, Mass.max, length.out = 100)
density_R_1 <- density_R_3 <- density_R_5 <-
density_R_10 <- density_R_15 <- matrix(NA, 100, num.boot)
for (i.boot in 1:num.boot) {
density_R_1[, i.boot] <-
sapply(M.seq, FUN = cond.density,
y = R_1, y.max = Radius.max, y.min = Radius.min,
x.max = Mass.max, x.min = Mass.min, deg = deg.choose,
w.hat = weights[, i.boot])
density_R_3[, i.boot] <-
sapply(M.seq, FUN = cond.density,
y = R_3, y.max = Radius.max, y.min = Radius.min,
x.max = Mass.max, x.min = Mass.min, deg = deg.choose,
w.hat = weights[, i.boot])
density_R_5[, i.boot] <-
sapply(M.seq, FUN = cond.density,
y = R_5, y.max = Radius.max, y.min = Radius.min,
x.max = Mass.max, x.min = Mass.min, deg = deg.choose,
w.hat = weights[, i.boot])
density_R_10[, i.boot] <-
sapply(M.seq, FUN = cond.density,
y = R_10, y.max = Radius.max, y.min = Radius.min,
x.max = Mass.max, x.min = Mass.min, deg = deg.choose,
w.hat = weights[, i.boot])
density_R_15[, i.boot] <-
sapply(M.seq, FUN = cond.density,
y = R_15, y.max = Radius.max, y.min = Radius.min,
x.max = Mass.max, x.min = Mass.min, deg = deg.choose,
w.hat = weights[, i.boot])
}
library(extrafont)
install.packages("extrafont")
library(ggplot2)
library(extrafont)
figureData <-  ggplot() +
geom_point(data = data.points, aes(x = lnR.obs, y = lnM.obs),
col = "black", alpha = 1, size = 1) +
geom_errorbar(data = data.points,
aes(x = lnR.obs, ymin = lnM.min, ymax = lnM.max),
col = "grey20", alpha = 1, size = 0.4) +
geom_errorbarh(data = data.points,
aes(x = lnR.obs, y = lnM.obs, xmin = lnR.min, xmax = lnR.max),
col = "grey20", alpha = 1, size = 0.4) +
xlab(expression(paste("Radius (R"["Earth"],")"))) +
ylab(expression(paste("Mass (M"["Earth"],")"))) +
coord_cartesian(ylim = c(-1.5,4), xlim = c(-0.3, 1.5)) +
scale_y_continuous(breaks=c(-1, 0, 1, 2, 3, 4),
labels=c(expression(bold("0.1")),
expression(bold("1")),
expression(bold("10")),
expression(bold(paste("10"^"2"))),
expression(bold(paste("10"^"3"))),
expression(bold(paste("10"^"4"))))) +
scale_x_continuous(breaks=c(-0.2, log10(1),log10(2),log10(3), log10(4),
log10(5),log10(7),log10(10),log10(15),
log10(20),log10(30)),
labels=c(0.6, 1,2,3,4,5,7,10,15,20,30)) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=15,face="bold"),
plot.title = element_text(hjust = 0.5),
text=element_text(family="Helvetica", size=12, face = "bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
ggtitle("Kepler data")
print(Myplot)
#setwd('C:/Users/szk381/Documents/GitHub/Predicting-exoplanet-mass-and-radius-relationship/Kepler-code/Result-Kepler/')
setwd('C:/Users/shbhu/Documents/GitHub/Py_mass_radius_working/R_code/Kepler-code/')
#setwd('C:/Users/szk381/Documents/GitHub/Predicting-exoplanet-mass-and-radius-relationship/Kepler-code/Result-Kepler/')
setwd('C:/Users/shbhu/Documents/GitHub/Py_mass_radius_working/R_code/Kepler-code/')
##### Read the dataset #######
rm(list = ls())
raw.data <- read.csv(file = "MR_Kepler_170605_noanalytTTV_noupplim.csv", skip = 49)
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
# taking sigma of Mass and Radius into half
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
# bounds for Mass and Radius
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
num.boot <- 100
select.deg <- 55
###########################################################
## Step 0: organize the dataset.
n <- length(Mass.obs) # num of obs.
if (length(Mass.obs) != length(Radius.obs)) {
warnings("The length of Mass and Radius must be the same!!!")
}
# rename the variables
data <- cbind(Mass.obs, Radius.obs)
sigma <- cbind(Mass.sigma, Radius.sigma)
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
source("MainFunctions/MRpredict.R")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = select.deg,
bootstrap = FALSE, num.boot = 1, store.output = FALSE,
cores = 1)
M.points <- result$M.points
R.points <- result$R.points
Mass.marg.boot <- result$Mass.marg.boot
Radius.marg.boot <- result$Radius.marg.boot
M.cond.R.boot <- result$M.cond.R.boot
R.cond.M.boot <- result$R.cond.M.boot
M.cond.R.var.boot <- result$M.cond.R.var.boot
R.cond.M.var.boot <- result$R.cond.M.var.boot
M.cond.R.lower.boot <- result$M.cond.R.lower.boot
R.cond.M.lower.boot <- result$R.cond.M.lower.boot
M.cond.R.upper.boot <- result$M.cond.R.upper.boot
R.cond.M.upper.boot <- result$R.cond.M.upper.boot
write.csv(M.points, "M.points.csv")
write.csv(R.points, "R.points.csv")
write.csv(Mass.marg.boot, "Mass.marg.boot.csv")
write.csv(Radius.marg.boot, "Radius.marg.boot.csv")
write.csv(M.cond.R.boot, "M.cond.R.boot.csv")
write.csv(R.cond.M.boot, "R.cond.M.boot.csv")
write.csv(M.cond.R.var.boot, "M.cond.R.var.boot.csv")
write.csv(M.cond.R.lower.boot, "M.cond.R.lower.boot.csv")
write.csv(M.cond.R.upper.boot, "M.cond.R.upper.boot.csv")
write.csv(R.cond.M.var.boot, "R.cond.M.var.boot.csv")
write.csv(R.cond.M.lower.boot, "R.cond.M.lower.boot.csv")
write.csv(R.cond.M.upper.boot, "R.cond.M.upper.boot.csv")
#setwd('C:/Users/szk381/Documents/GitHub/Predicting-exoplanet-mass-and-radius-relationship/Kepler-code/Result-Kepler/')
setwd('C:/Users/shbhu/Documents/GitHub/Py_mass_radius_working/R_code/Kepler-code/')
##### Read the dataset #######
rm(list = ls())
raw.data <- read.csv(file = "MR_Kepler_170605_noanalytTTV_noupplim.csv", skip = 49)
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
# taking sigma of Mass and Radius into half
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
# bounds for Mass and Radius
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
num.boot <- 100
select.deg <- 55
###########################################################
## Step 0: organize the dataset.
n <- length(Mass.obs) # num of obs.
if (length(Mass.obs) != length(Radius.obs)) {
warnings("The length of Mass and Radius must be the same!!!")
}
# rename the variables
data <- cbind(Mass.obs, Radius.obs)
sigma <- cbind(Mass.sigma, Radius.sigma)
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
source("MainFunctions/MRpredict.R")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = select.deg,
bootstrap = FALSE, num.boot = 1, store.output = FALSE,
cores = 1)
install.packages("Rsolnp")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 2,
bootstrap = FALSE, num.boot = 1, store.output = FALSE,
cores = 1)
source("MainFunctions/MRestimate.R")
source("MainFunctions/MRpredict.R")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 2,
bootstrap = FALSE, num.boot = 1, store.output = FALSE,
cores = 1)
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 2,
bootstrap = TRUE, num.boot = 1, store.output = FALSE,
cores = 1)
#setwd('C:/Users/szk381/Documents/GitHub/Predicting-exoplanet-mass-and-radius-relationship/Kepler-code/Result-Kepler/')
setwd('C:/Users/shbhu/Documents/GitHub/Py_mass_radius_working/R_code/Kepler-code/')
##### Read the dataset #######
rm(list = ls())
raw.data <- read.csv(file = "Cool_stars_20181107", skip = 49)
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
# taking sigma of Mass and Radius into half
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
# bounds for Mass and Radius
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
num.boot <- 100
select.deg <- 55
###########################################################
## Step 0: organize the dataset.
n <- length(Mass.obs) # num of obs.
if (length(Mass.obs) != length(Radius.obs)) {
warnings("The length of Mass and Radius must be the same!!!")
}
# rename the variables
data <- cbind(Mass.obs, Radius.obs)
sigma <- cbind(Mass.sigma, Radius.sigma)
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
source("MainFunctions/MRpredict.R")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 5,
bootstrap = TRUE, num.boot = 1, store.output = FALSE,
cores = 1)
M.points <- result$M.points
R.points <- result$R.points
Mass.marg.boot <- result$Mass.marg.boot
Radius.marg.boot <- result$Radius.marg.boot
M.cond.R.boot <- result$M.cond.R.boot
R.cond.M.boot <- result$R.cond.M.boot
M.cond.R.var.boot <- result$M.cond.R.var.boot
R.cond.M.var.boot <- result$R.cond.M.var.boot
M.cond.R.lower.boot <- result$M.cond.R.lower.boot
R.cond.M.lower.boot <- result$R.cond.M.lower.boot
M.cond.R.upper.boot <- result$M.cond.R.upper.boot
R.cond.M.upper.boot <- result$R.cond.M.upper.boot
write.csv(M.points, "M.points.csv")
write.csv(R.points, "R.points.csv")
write.csv(Mass.marg.boot, "Mass.marg.boot.csv")
write.csv(Radius.marg.boot, "Radius.marg.boot.csv")
write.csv(M.cond.R.boot, "M.cond.R.boot.csv")
write.csv(R.cond.M.boot, "R.cond.M.boot.csv")
write.csv(M.cond.R.var.boot, "M.cond.R.var.boot.csv")
write.csv(M.cond.R.lower.boot, "M.cond.R.lower.boot.csv")
write.csv(M.cond.R.upper.boot, "M.cond.R.upper.boot.csv")
write.csv(R.cond.M.var.boot, "R.cond.M.var.boot.csv")
write.csv(R.cond.M.lower.boot, "R.cond.M.lower.boot.csv")
write.csv(R.cond.M.upper.boot, "R.cond.M.upper.boot.csv")
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 5,
bootstrap = TRUE, num.boot = 1, store.output = FALSE,
cores = 1)
raw.data
raw.data <- read.csv(file = "Cool_stars_20181107", skip = 49)
setwd('C:/Users/shbhu/Documents/GitHub/Py_mass_radius_working/R_code/Kepler-code/')
raw.data <- read.csv(file = "Cool_stars_20181107", skip = 49)
raw.data <- read.csv(file = "Cool_stars_20181107.csv", skip = 49)
raw.data <- read.csv(file = "Cool_stars_20181107.csv")
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
# taking sigma of Mass and Radius into half
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
# bounds for Mass and Radius
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
num.boot <- 100
select.deg <- 55
result <- MRpredict(data, sigma, Mass.min = Mass.min, Mass.max = Mass.max,
Radius.min = Radius.min, Radius.max = Radius.max,
log = TRUE, select.deg = 5,
bootstrap = TRUE, num.boot = 1, store.output = FALSE,
cores = 1)
###########################################################
## Step 0: organize the dataset.
n <- length(Mass.obs) # num of obs.
if (length(Mass.obs) != length(Radius.obs)) {
warnings("The length of Mass and Radius must be the same!!!")
}
# rename the variables
data <- cbind(Mass.obs, Radius.obs)
sigma <- cbind(Mass.sigma, Radius.sigma)
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
data <- subset(raw.data, select = c("rowid", "pl_hostname", "pl_masse",
"pl_masseerr1", "pl_masseerr2",
"pl_rade", "pl_radeerr1", "pl_radeerr2"))
# taking sigma of Mass and Radius into half
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
Radius.sigma <- (data$pl_radeerr1 + abs(data$pl_radeerr2))/2
Mass.obs <- raw.data$pl_masse
Radius.obs <- raw.data$pl_rade
# bounds for Mass and Radius
Radius.min <- -0.3
Radius.max <- log10(max(Radius.obs) + sd(Radius.obs)/sqrt(length(Radius.obs)))
Mass.min <- log10( max(min(Mass.obs) - sd(Mass.obs)/sqrt(length(Mass.obs)), 0.1))
Mass.max <- log10(max(Mass.obs) + sd(Mass.obs)/sqrt(length(Mass.obs)))
num.boot <- 100
select.deg <- 55
# rename the variables
data <- cbind(Mass.obs, Radius.obs)
sigma <- cbind(Mass.sigma, Radius.sigma)
M.obs <- Mass.obs
R.obs <- Radius.obs
M.sg <- Mass.sigma
R.sg <- Radius.sigma
bounds <- c(Mass.max, Mass.min, Radius.max, Radius.min)
Mass.sigma <- (data$pl_masseerr1 + abs(data$pl_masseerr2))/2
